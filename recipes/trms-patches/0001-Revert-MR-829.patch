From 097927216f57569346b54353386d3d68d053ce8a Mon Sep 17 00:00:00 2001
From: Ray Tiley <ray.tiley@trms.com>
Date: Mon, 19 Jul 2021 21:39:27 -0400
Subject: [PATCH] Revert MR-829

Revert "systemclock: fall back to g_get_monotonic_time"

This reverts commit ea331441476c4730258cd49deb2d6a2ff90cc492.

Revert "systemclock: reorg real and mono time functions for macOS and win32"

This reverts commit 5328941632255c5b7a9652b0446aa74dbf4c5f4b.

Revert "systemclock: Use g_get_real_time on Windows and macOS for realtime clock"

This reverts commit d8237f150ccc011a362a9e6003b34df7b443b9d3.

Revert "systemclock: Reorganize defined checks for parts of GstSystemClock"

This reverts commit bb77f41abf205e8e0e525c92f33954c0ab0ac7bc.
---
 gst/gstsystemclock.c | 103 +++++++++++++++++--------------------------
 1 file changed, 40 insertions(+), 63 deletions(-)

diff --git a/gst/gstsystemclock.c b/gst/gstsystemclock.c
index fb9696575..665da53cf 100644
--- a/gst/gstsystemclock.c
+++ b/gst/gstsystemclock.c
@@ -386,10 +386,6 @@ static void gst_system_clock_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
 
 static GstClockTime gst_system_clock_get_internal_time (GstClock * clock);
-#if !defined HAVE_POSIX_TIMERS || !defined HAVE_CLOCK_GETTIME
-static GstClockTime gst_system_clock_get_mono_time (GstSystemClock * clock);
-static GstClockTime gst_system_clock_get_real_time ();
-#endif
 static guint64 gst_system_clock_get_resolution (GstClock * clock);
 static GstClockReturn gst_system_clock_id_wait_jitter (GstClock * clock,
     GstClockEntry * entry, GstClockTimeDiff * jitter);
@@ -828,47 +824,16 @@ clock_type_to_posix_id (GstClockType clock_type)
 /* MT safe */
 static GstClockTime
 gst_system_clock_get_internal_time (GstClock * clock)
-{
-  GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
-#if defined HAVE_POSIX_TIMERS && defined HAVE_CLOCK_GETTIME
-  // BSD and Linux' Posix timers and clock_gettime cover all of the different clock types
-  // without need for special handling so we'll use those.
-  clockid_t ptype;
-  struct timespec ts;
-
-  ptype = clock_type_to_posix_id (sysclock->priv->clock_type);
-
-  if (G_UNLIKELY (clock_gettime (ptype, &ts)))
-    return GST_CLOCK_TIME_NONE;
-
-  return GST_TIMESPEC_TO_TIME (ts);
-#else
-  if (sysclock->priv->clock_type == GST_CLOCK_TYPE_REALTIME) {
-    return gst_system_clock_get_real_time ();
-  } else {
-    return gst_system_clock_get_mono_time (sysclock);
-  }
-#endif /* !HAVE_POSIX_TIMERS || !HAVE_CLOCK_GETTIME */
-}
-
-#if !defined HAVE_POSIX_TIMERS || !defined HAVE_CLOCK_GETTIME
-static GstClockTime
-gst_system_clock_get_real_time ()
-{
-  gint64 rt_micros = g_get_real_time ();
-  // g_get_real_time returns microseconds but we need nanos, so we'll multiply by 1000
-  return ((guint64) rt_micros) * 1000;
-}
-
-static GstClockTime
-gst_system_clock_get_mono_time (GstSystemClock * sysclock)
 {
 #if defined __APPLE__
+  GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
   uint64_t mach_t = mach_absolute_time ();
   return gst_util_uint64_scale (mach_t, sysclock->priv->mach_timebase.numer,
       sysclock->priv->mach_timebase.denom);
 #else
-#if defined G_OS_WIN32
+#ifdef G_OS_WIN32
+  GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
+
   if (sysclock->priv->frequency.QuadPart != 0) {
     LARGE_INTEGER now;
 
@@ -879,6 +844,7 @@ gst_system_clock_get_mono_time (GstSystemClock * sysclock)
         GST_SECOND, sysclock->priv->frequency.QuadPart);
   } else
 #endif /* G_OS_WIN32 */
+#if !defined HAVE_POSIX_TIMERS || !defined HAVE_CLOCK_GETTIME
   {
     gint64 monotime;
 
@@ -886,45 +852,56 @@ gst_system_clock_get_mono_time (GstSystemClock * sysclock)
 
     return monotime * 1000;
   }
+#else
+  {
+    GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
+    clockid_t ptype;
+    struct timespec ts;
+
+    ptype = clock_type_to_posix_id (sysclock->priv->clock_type);
+
+    if (G_UNLIKELY (clock_gettime (ptype, &ts)))
+      return GST_CLOCK_TIME_NONE;
+
+    return GST_TIMESPEC_TO_TIME (ts);
+  }
+#endif
 #endif /* __APPLE__ */
 }
-#endif /* !HAVE_POSIX_TIMERS || !HAVE_CLOCK_GETTIME */
 
 static guint64
 gst_system_clock_get_resolution (GstClock * clock)
 {
+#if defined __APPLE__
   GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
-#if defined __APPLE__ || defined G_OS_WIN32
-  if (sysclock->priv->clock_type == GST_CLOCK_TYPE_REALTIME) {
-    return 1 * GST_USECOND;
+  return gst_util_uint64_scale (GST_NSECOND,
+      sysclock->priv->mach_timebase.numer, sysclock->priv->mach_timebase.denom);
+#else
+#ifdef G_OS_WIN32
+  GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
+
+  if (sysclock->priv->frequency.QuadPart != 0) {
+    return GST_SECOND / sysclock->priv->frequency.QuadPart;
   } else
-#endif
-#if defined __APPLE__
-  {
-    return gst_util_uint64_scale (GST_NSECOND,
-        sysclock->priv->mach_timebase.numer,
-        sysclock->priv->mach_timebase.denom);
-  }
-#elif defined G_OS_WIN32
+#endif /* G_OS_WIN32 */
+#if defined(HAVE_POSIX_TIMERS) && defined(HAVE_CLOCK_GETTIME)
   {
-    if (sysclock->priv->frequency.QuadPart != 0) {
-      return GST_SECOND / sysclock->priv->frequency.QuadPart;
-    } else {
-      return 1 * GST_USECOND;
-    }
-  }
-#elif defined(HAVE_POSIX_TIMERS) && defined(HAVE_CLOCK_GETTIME)
+    GstSystemClock *sysclock = GST_SYSTEM_CLOCK_CAST (clock);
     clockid_t ptype;
-  struct timespec ts;
+    struct timespec ts;
 
-  ptype = clock_type_to_posix_id (sysclock->priv->clock_type);
+    ptype = clock_type_to_posix_id (sysclock->priv->clock_type);
 
-  if (G_UNLIKELY (clock_getres (ptype, &ts)))
-    return GST_CLOCK_TIME_NONE;
+    if (G_UNLIKELY (clock_getres (ptype, &ts)))
+      return GST_CLOCK_TIME_NONE;
 
-  return GST_TIMESPEC_TO_TIME (ts);
+    return GST_TIMESPEC_TO_TIME (ts);
+  }
 #else
+  {
     return 1 * GST_USECOND;
+  }
+#endif
 #endif /* __APPLE__ */
 }
 
-- 
2.20.1.windows.1

